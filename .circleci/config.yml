version: 2.1

jobs:
  test:
    docker:
      - image: cimg/go:1.17
      - image: postgres:13.4-alpine
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: contacts
          POSTGRES_PASSWORD: 4tRLFRDZ99tKHZEx
    working_directory: ~/cci-demo-docker
    environment:
      TEST_RESULTS: /tmp/test-results
    steps:
      - checkout
      - run:
          name: Waiting for Postgres to be ready
          command: |
            dockerize -wait tcp://localhost:5432 -timeout 10s
      - run:
          name: Set up test results folder
          command: |
            mkdir -p $TEST_RESULTS
      # TOOD: replace go-junit-report for test reports
      - run:
          name: Install go-junit-report
          command: |
            go install github.com/jstemmer/go-junit-report@v0.9.1
      - run:
          name: Run unit tests
          environment:
            DATABASE_URL: "postgres://ubuntu:4tRLFRDZ99tKHZEx@localhost:5432/contacts?sslmode=disable"
            DB_MIGRATIONS: /home/circleci/cci-demo-docker/db/migrations
          command: |
            go test -v ./... | go-junit-report > "${TEST_RESULTS}/go-test-report.xml"
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results
  test_docker_compose:
    docker:
      - image: cimg/go:1.17
    working_directory: ~/cci-demo-docker
    steps:
      - checkout
      - setup_remote_docker:
          # https://circleci.com/docs/2.0/building-docker-images/#docker-version
          version: 20.10.7
      - run:
          name: Spin up services with Docker Compose
          command: |
            # set project name for our services declared in Docker Compose
            docker-compose --project-name circleci-demo-docker up --build -d
            docker container ls

      - run:
          # Here, we make use of dockerize to wait on our application server
          name: Wait on server to be ready
          command: |
            # Because we are using remote_docker, all docker-related activities run inside this remote container.
            # In other words, the contacts server is not directly accessible to our primary container here.
            # Hence, we will need to run the dockerize command in the same network in order to poll it.
            # See https://circleci.com/docs/2.0/building-docker-images/#accessing-services
            docker container run --network container:circleci-demo-docker_contacts_1 \
              docker.io/jwilder/dockerize \
              -wait http://localhost:8080 \
              -wait-retry-interval 2s \
              -timeout 20s
      - run:
          name: Healthcheck on our server
          command: |
            docker container run --network container:circleci-demo-docker_contacts_1 \
              appropriate/curl \
              --retry 10 --retry-delay 1 --retry-connrefused \
              http://localhost:8080/contacts/test
  push_image:
    docker:
      # We technically do not need Go ecosystem in this job,
      # however, we are keeping this same as `build` job in an attempt
      # to exercise performance improvement through cached images in the workflow run.
      - image: cimg/go:1.17
    steps:
      - checkout
      - setup_remote_docker:
          # https://circleci.com/docs/2.0/building-docker-images/#docker-version
          version: 20.10.7
      - run:
          name: Build service
          command: |
            make
      - run:
          name: Build and push Docker image
          environment:
            DOCKER_IMAGE_NAME: circleci/cci-demo-docker
          command: |
            TAG="0.1.${CIRCLE_BUILD_NUM}"
            docker image build --tag "${DOCKER_IMAGE_NAME}:${TAG}" .
            # TODO: Uncomment the image push commands below when merged to upstream: github.com/CircleCI-Public/circleci-demo-docker
            # login credentials should be provided via context or project environment variables.
            # echo $DOCKER_PASSWORD | docker login docker.io --username $DOCKER_LOGIN --password-stdin
            # docker image push --all-tags $DOCKER_IMAGE_NAME

workflows:
  main:
    jobs:
      - test
      - test_docker_compose
      - push_image:
          requires:
            - test
            - test_docker_compose
